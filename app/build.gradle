buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.+'
    }
}


apply plugin: 'android'
apply plugin: 'hugo'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

def versionMajor = 0
def versionMinor = 4
def versionPatch = 1
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 19
    buildToolsVersion "20.0.0"

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.smartsoft.app"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        minSdkVersion 14
        targetSdkVersion 19

        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        debug {
            runProguard false
            versionNameSuffix "-debug"
        }

        release {
            runProguard false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        defaultFlavor {
            proguardFile 'proguard-rules.txt'
        }
    }

    lintOptions {
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    compile 'com.google.code.gson:gson:2.2.3'
    compile 'com.jakewharton:butterknife:5.1.1'
    compile 'com.jakewharton.timber:timber:2.2.+'
    compile 'com.squareup.picasso:picasso:2.3.2'
    compile 'com.squareup:otto:1.3.4'
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    compile 'com.netflix.rxjava:rxjava-core:0.19.1'
    compile 'com.netflix.rxjava:rxjava-android:0.19.1'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.google.guava:guava:17.0'
    compile 'org.apache.commons:commons-collections4:4.0'

    debugCompile 'com.squareup.retrofit:retrofit-mock:1.6.1'

    compile 'com.squareup.dagger:dagger:1.2.1'
    provided 'com.squareup.dagger:dagger-compiler:1.2.1'

    compile fileTree(dir: 'libs', include: '*.jar')
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}
